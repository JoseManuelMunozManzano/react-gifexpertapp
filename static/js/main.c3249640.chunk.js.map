{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","getFetchGifs","category","a","url","encodeURI","process","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAkBzC,OACE,uBAAMC,SAZa,SAAAC,GACnBA,EAAEC,iBAEFC,QAAQC,IAAI,eAAgBN,GAExBA,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAKhB,UACE,4BAAID,IACJ,uBAAOU,KAAK,OAAOC,MAAOX,EAAYY,SAlBhB,SAAAT,GACxBF,EAAcE,EAAEU,OAAOF,c,+BCWZG,EAlBG,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UACpDH,GAFiB,6BAGGI,oCAHH,SAIAC,MAAMH,GAJN,cAIbI,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAG,UAAES,EAAIG,cAAN,aAAE,EAAYC,iBAAiBb,QAXnB,kBAeZO,GAfY,4CAAH,sDCkBHO,EAdK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAC5B,OACE,sBAAKe,UAAU,yCAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKN,IACpB,4BAAIA,QCsBKO,EAxBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFN,SAAAA,GAAa,IAAD,EACZhB,mBAAS,CACjCwB,KAAM,GACNa,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OATAC,qBAAU,WACRzB,EAAaC,GAAUyB,MAAK,SAAAC,GAC1BH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDd2BK,CAAa3B,GAAjCc,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAElDqB,GACC,mBAAGJ,UAAU,mCAAb,wBAGF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgBjBgB,EA9BM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAEf7C,mBAAS6C,GAFM,mBAE5CC,EAF4C,KAEhC/C,EAFgC,KAcnD,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG+C,EAAWpB,KAAI,SAAAV,GAAQ,OAEtB,aADA,CACC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCrBxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.c3249640.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    console.log('handleSubmit', inputValue);\n\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>{inputValue}</p>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getFetchGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${process.env.REACT_APP_API_GIPHY}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport default getFetchGifs;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Loading...</p>\n      )}\n\n      <div className=\"card-grid\">\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\n\nimport getFetchGifs from '../helpers/getFetchGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  // Los efectos no pueden ser async porque esperan algo síncrono\n  // pero dentro si puede usarse la promesa con .then()\n  useEffect(() => {\n    getFetchGifs(category).then(imgs => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]); // Si no hay dependencias sólo se ejecutará una vez\n\n  return state; // {data:[], loading: true}\n};\n","import React, { useState } from 'react';\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = ({ defaultCategories = [] }) => {\n  //const [categories, setCategories] = useState(['Dragon Ball']);\n  const [categories, setCategories] = useState(defaultCategories);\n\n  // const handleAdd = () => {\n  //   // Forma más usual\n  //   //setCategories([...categories, 'Spiderman']);\n\n  //   // Otra forma muy útil\n  //   // Un callback en el que el primer argumento es el valor del estado anterior\n  //   // y en el que se regresa el nuevo estado\n  //   setCategories(cats => [...cats, 'Spiderman']);\n  // };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(category => (\n          // El key no puede ser el índice y tiene que ser único\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}